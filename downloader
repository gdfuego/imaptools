#!/usr/bin/env python

import email
import os
import getpass
import ayemappy
from tqdm import tqdm

def ensure_dir(file_path):
    """Given a file path, ensure that the relevant paths exist"""
    directory = os.path.dirname(file_path)
    if not os.path.exists(directory):
        os.makedirs(directory)

def setup():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--imapserver', '-i', help="IMAP server to connect to")
    parser.add_argument('--username', '-u', help="Username to connect as")
    args = parser.parse_args()
    return args

def main():
    """Main function"""
    args = setup()
    if not args.imapserver:
        args.imapserver = raw_input('Enter the server name:')
    if not args.username:
        args.username = raw_input('Enter your username:')
    args.passwd = getpass.getpass('Enter your password: ')

    part = None

    server = ayemappy.Ayemappy()
    server.connect(args.imapserver, args.username, args.passwd)
    for folder in server.listfolders():
        # Iterating over all emails
        server.listmessages(folder)
        folderlist = server.listmessages(folder)
        print 'Processing %s [%d msgs]' % (folder, len(folderlist))
        if folderlist:
            for msgid in tqdm(folderlist, unit="messages"):
                typ, messageparts = server.session.fetch(msgid, '(RFC822)')
                if typ != 'OK':
                    print 'Error fetching mail.'

                emailbody = messageparts[0][1]
                mail = email.message_from_string(emailbody)
                for part in mail.walk():
                    if part.get_content_maintype() == 'multipart':
                        continue
                if part.get('Content-Disposition') is None:
                    continue
                filename = part.get_filename()

                if bool(filename):
                    filepath = os.path.join(".", server.server, server.user, filename)
                    ensure_dir(filepath)
                    if not os.path.isfile(filepath):
                        segment = part.get_payload(decode=True)
                        if segment:
                            attachment = open(filepath, 'wb')
                            attachment.write(segment)
                            attachment.close()

if __name__ == '__main__':
    main()
